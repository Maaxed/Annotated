
${annotations}
public static record ${packetName}
(
	${packetParameters}
)
{
	${if adapter}
		private static final fr.max2.annotated.lib.network.adapter.NetworkAdapter<${packetName}, ${dataClassName}> ADAPTER = ${adapter};
	${end}

	private static void handle(${packetName} msg, java.util.function.Supplier<net.minecraftforge.network.NetworkEvent.Context> ctxSup)
	{	
		${targetName}.${function}(
			${parameters}
		);
	}

	public static void registerTo(net.minecraftforge.network.simple.SimpleChannel channel, int index)
	{
		fr.max2.annotated.lib.network.packet.PacketSettings.forType(${dataClassName}.class, ${serializer})
			${if serverPacket}
			.setDestination(net.minecraftforge.fml.LogicalSide.SERVER)
			${end}
			${if clientPacket}
			.setDestination(net.minecraftforge.fml.LogicalSide.CLIENT)
			${end}
			.setScheduled(${sheduled})
			${if adapter}
				.setConsumer(ADAPTER, ${packetName}::handle)
			${else}
				.setConsumer(${packetName}::handle)
			${end}
			.register(channel, index);
	}
}

public static ${dataClassName} ${function}(${packetParameters})
{
	var packet = new ${packetName}(
		${packetParameterNames}
	);

	${if adapter}
		return ${packetName}.ADAPTER.toNetwork(packet);
	${else}
		return packet;
	${end}
}