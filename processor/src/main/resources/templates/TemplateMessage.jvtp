package ${package};

@javax.annotation.processing.Generated("fr.max2.annotated.processor.network.PacketProcessor")
public class ${className}
{
${fieldsDeclaration}
	
	private ${className}()
	{ }
	
	${if allFields}
	private ${className}(${allFields})
	{
${internalize}
	}
	${end}
	
	private static void encode(${className} msg, net.minecraft.network.FriendlyByteBuf buf)
	{
${encode}
	}
	
	private static ${className} decode(net.minecraft.network.FriendlyByteBuf buf)
	{
		${className} msg = new ${className}();
		
${decode}
		
		return msg;
	}
	/*
	private static void handle(${className} msg, java.util.function.Supplier<net.minecraftforge.fml.network.NetworkEvent.Context> ctxSup)
	{
		net.minecraftforge.fml.network.NetworkEvent.Context ctx = ctxSup.get();
		if (ctx.getDirection().getReceptionSide() != net.minecraftforge.fml.LogicalSide.${receiveSide})
			return;
		
		${if sheduled}
		${if externalize}
		ctx.enqueueWork(() ->
		{
${externalize}
			${function}(${parameters});
		});
		${else}
		ctx.enqueueWork(() -> ${function}(${parameters}));
		${end}
		${else}
${externalize}
		${function}(${parameters});
		${end}
		ctx.setPacketHandled(true);
	}
	
	static void registerTo(net.minecraftforge.fml.network.simple.SimpleChannel channel, int index)
	{
		channel.registerMessage(index, ${className}.class, ${className}::encode, ${className}::decode, ${className}::handle);
	}
	
	${if clientPacket}public${else}private${end} static void send(net.minecraftforge.fml.network.simple.SimpleChannel channel, net.minecraftforge.fml.network.PacketDistributor.PacketTarget _target${if allFields}, ${end}${allFields})
	{
		channel.send(_target, new ${className}(${messageParameters}));
	}
	${if serverPacket}
	
	public static void sendToServer(${allFields})
	{
		send(net.minecraftforge.fml.network.PacketDistributor.SERVER.noArg()${if allFields}, ${end}${messageParameters});
	}
	${end}
	${if clientPacket}
	
	public static void sendTo(net.minecraft.entity.player.ServerPlayerEntity _targetPlayer${if allFields}, ${end}${allFields})
	{
		send(net.minecraftforge.fml.network.PacketDistributor.PLAYER.with(() -> _targetPlayer)${if allFields}, ${end}${messageParameters});
	}
	${end}
	*/
}
